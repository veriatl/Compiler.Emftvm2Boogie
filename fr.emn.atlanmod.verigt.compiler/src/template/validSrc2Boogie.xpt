«IMPORT ecore»

/* 

If you wang to print axiom, add
EXPAND printAxioms(name) FOREACH eClassifiers- 

*/
«DEFINE main FOR EPackage-»
«FILE "validSrc.bpl"-»

function valid_src_model($h: HeapType): bool{
«EXPAND constraintsOfClassifiers(name) FOREACH eClassifiers SEPARATOR "&&"-»
} 
«ENDFILE-»



«ENDDEFINE»

«REM» «ENDREM»

«DEFINE constraintsOfClassifiers(String mmName) FOR EClass»
«LET "__"+name.toLowerCase() AS bv»
(forall «bv» : ref ::
  («bv»!=null && read($h, «bv», alloc) && dtype(«bv») <: «mmName»$«name» ==> «IF this.eStructuralFeatures.size == 0»true«ENDIF»
    «FOREACH eStructuralFeatures AS sf SEPARATOR "&&"»«
        IF sf.metaType == EReference && ((EReference)sf).many
    »(read($h, «bv», «mmName»$«name».«sf.name»)!=null &&
       (forall __i: int :: 0<=__i && __i<_System.array.Length(read($h, «bv», «mmName»$«name».«sf.name»)) ==> 
         ($Unbox(read($h, read($h, «bv», «mmName»$«name».«sf.name»), IndexField(__i))): ref !=null 
         && read($h, $Unbox(read($h, read($h, «bv», «mmName»$«name».«sf.name»), IndexField(__i))): ref, alloc)
         && dtype($Unbox(read($h, read($h, «bv», «mmName»$«name».«sf.name»), IndexField(__i))): ref)<:«mmName»$«((EReference)sf).eReferenceType.name») ))
        «ELSEIF sf.metaType == EReference && !((EReference)sf).many
    »(read($h, «bv», «mmName»$«name».«sf.name»)!=null && read($h, read($h, «bv», «mmName»$«name».«sf.name») ,alloc) ==>
       dtype(read($h, «bv», «mmName»$«name».«sf.name»)) <: «mmName»$«((EReference)sf).eReferenceType.name» ) «
         ELSE» true «ENDIF»
     «ENDFOREACH»  
  )
)
«ENDLET»
«ENDDEFINE»




«DEFINE constraintsOfClassifiers(String mmName) FOR EClassifier»«
ENDDEFINE»

