«IMPORT ATL»
«IMPORT OCL»
«EXTENSION extension::JavaExtension»


«DEFINE main FOR Module-»
«FILE "surjective.bpl"-
»function surj_tar_model($s: HeapType, $t: HeapType): bool{
«FOREACH this.elements AS rule SEPARATOR '&&'»
«EXPAND printFunction(this) FOR rule»«
ENDFOREACH»
}«ENDFILE-»
«ENDDEFINE»



«DEFINE printFunction(Module m) FOR MatchedRule-»
«LET this.outPattern.elements.first() AS out»
«IF !contains(out, out.type.name)»«store(out,out.type.name,true)»
(forall «out.varName»: ref :: 
  «out.varName»!=null && read($t, «out.varName», alloc) && dtype(«out.varName») == «((OclModelElement)(out.type)).model.name»$«out.type.name» ==>
   «FOREACH m.elements.select(r| 
     ((MatchedRule)r).outPattern.elements.first().type.name == out.type.name && 
         ((OclModelElement)(((MatchedRule)r).outPattern.elements.first().type)).model.name
         == ((OclModelElement)(out.type)).model.name) AS temp SEPARATOR '||'»
   		«EXPAND printRule(out.varName) FOR temp»
   «ENDFOREACH»
)
«ELSE»
true
«ENDIF»
«ENDLET»
«ENDDEFINE»


«DEFINE printRule(String oid) FOR MatchedRule»

(exists «EXPAND Library::printInPattern FOREACH this.inPattern.elements SEPARATOR ','»: ref :: 
«EXPAND Library::printInPatternHeap("$s") FOREACH this.inPattern.elements SEPARATOR ' && '» && «
IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("$s") FOR this.inPattern.filter» «ENDIF» &&
  «EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern» == «oid»)
«ENDDEFINE»



«DEFINE printFunction(Module m) FOR ModuleElement»
«ENDDEFINE»

«DEFINE printRule(String oid) FOR ModuleElement»
«ENDDEFINE»






