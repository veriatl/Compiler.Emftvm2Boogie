«IMPORT ATL»
«IMPORT OCL»

«DEFINE printInPattern FOR InPatternElement»
«( "no (specific) DEFINE block 'printInPattern' defined for type " + this.metaType.name )»
«ENDDEFINE»

«DEFINE printInPatternAllocation FOR InPatternElement»
«( "no (specific) DEFINE block 'printInPatternAllocation' defined for type " + this.metaType.name )»
«ENDDEFINE»

«DEFINE printInPattern FOR SimpleInPatternElement-»
«this.varName-»
«ENDDEFINE»

«DEFINE printOutPatternInApply FOR OutPatternElement»
«( "no (specific) DEFINE block 'printOutPatternInApply' defined for type " + this.metaType.name )»
«ENDDEFINE»

«DEFINE printOutPatternInApply FOR SimpleOutPatternElement-»
«this.varName-»
«ENDDEFINE»

«DEFINE printInPatternInCoPattern FOR InPatternElement»
«( "no (specific) DEFINE block 'printInPatternInCoPattern' defined for type " + this.metaType.name )»
«ENDDEFINE»

«DEFINE printInPatternInCoPattern FOR SimpleInPatternElement
»«this.varName-»«
ENDDEFINE»

«DEFINE printCoPatternInApply FOR InPattern
»getTarsBySrcs(«FOREACH elements AS e ITERATOR it»«IF it.lastIteration»Seq#Singleton(«ELSE»Seq#Build(«ENDIF»«ENDFOREACH»«EXPAND printInPatternInCoPattern FOREACH elements SEPARATOR '),'»))«
ENDDEFINE»


«DEFINE printInPatternAllocation FOR SimpleInPatternElement-»
«this.varName-»!=null && read($srcHeap, «this.varName-», alloc) && dtype(«this.varName-») <: «EXPAND printInPatternType(this) FOR this» 
«ENDDEFINE»

«DEFINE printOutPattern(Collection[SimpleInPatternElement] elements) FOR InPattern
»getTarsBySrcs(«FOREACH elements AS e ITERATOR it»«IF it.lastIteration»Seq#Singleton(«ELSE»Seq#Build(«ENDIF»«ENDFOREACH»«EXPAND printInPattern FOREACH elements SEPARATOR '),'»))«
ENDDEFINE»

«DEFINE printOutPatternType(OutPatternElement out) FOR OutPatternElement-»
«((OclModelElement)out.type).model.name»$«out.type.name-»
«ENDDEFINE»

«DEFINE printInPatternType(InPatternElement in) FOR InPatternElement-»
«((OclModelElement)in.type).model.name»$«in.type.name-»
«ENDDEFINE»

«DEFINE printInPatternHeap(String hp) FOR InPatternElement-»
«ENDDEFINE»

«DEFINE printInPatternHeap(String hp) FOR SimpleInPatternElement-»
«this.varName-»!=null && read(«hp», «this.varName-», alloc) && dtype(«this.varName-») <: «EXPAND printInPatternType(this) FOR this» 
«ENDDEFINE»

